#!/usr/bin/env bash
#
# One‑time setup: create and push an initial gh‑pages branch containing
# `cargo doc` output for the current Rust crate repository.
#
# After this, use the deploy script for subsequent updates.

set -euo pipefail

REPO_URL="$(git remote get-url origin)"
DEPLOY_DIR="/tmp/cargo-doc-setup"
DOC_DIR="cargo-docs"

# ── Sanity checks ──────────────────────────────────────────────────────────────
if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
  echo '❌ Error: not inside a Git repository.'
  exit 1
fi

if git ls-remote --exit-code --heads origin gh-pages >/dev/null; then
  echo '❌ origin/gh-pages already exists. Run the regular deploy script instead.'
  exit 1
fi

# ── Build documentation ────────────────────────────────────────────────────────
echo '📚 Building documentation…'
cargo doc --all-features --no-deps

# ── Determine crate name and create root redirect ─────────────────────────────
CRATE_NAME=$(grep -m1 '^name' Cargo.toml | sed -E 's/name *= *"(.*)".*/\1/')
cat >"$DOC_DIR/index.html" <<EOF
<!DOCTYPE html><html lang="en"><head>
<meta http-equiv="refresh" content="0; url=${CRATE_NAME}/index.html">
<title>Redirecting to ${CRATE_NAME} docs…</title>
</head><body></body></html>
EOF

# ── Prepare temporary gh-pages worktree ────────────────────────────────────────
rm -rf "$DEPLOY_DIR"
mkdir -p "$DEPLOY_DIR"
pushd "$DEPLOY_DIR" >/dev/null

git init
git checkout --orphan gh-pages

# Copy docs in, preserving subdirs
cp -R "$OLDPWD/$DOC_DIR/"* .
touch .nojekyll
[[ -f "$OLDPWD/CNAME" ]] && cp "$OLDPWD/CNAME" .

git add .
git commit -m "Initial deploy of $CRATE_NAME documentation"
git remote add origin "$REPO_URL"
git push -u origin gh-pages

popd >/dev/null
rm -rf "$DEPLOY_DIR"

echo "✅ GitHub Pages branch 'gh-pages' created and published."
echo "👉 In your repo settings → Pages, set source to the 'gh-pages' branch, root directory."
